name: Build and test

# README:
#
# The semantics for running shell commands in GitHub actions is non-obvious. Please read
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
# before modifying this file. Our strategy is to rely on the built-in (unspecified) shell, and
# explicitly set the shell settings we want (with `set -eo pipefail`) at the beginning of any
# bash script. For more information on these settings, see `man bash`.
#
# GitHub Actions files can be difficult to modify with confidence, because testing changes often
# requires pushing to a branch and running CI remotely. To make this process easier, consider
# the following:
#
# 1) Use Visual Studio Code with the GitHub Actions Extension (github.vscode-github-actions).
#    This allows you to check the validity of your action schema and syntax without pushing to a
#    branch.
# 2) Use https://github.com/nektos/act to run your CI steps locally. Note this will only work with
#    steps run on Linux platforms, as `act` is implemented with Docker containers.

on:
  workflow_call:
    inputs:
      build-type:
        description: 'The build configuration type'
        default: 'debug'
        required: false
        type: string

env:
  spm-build-options: -Xswiftc -enable-testing --explicit-target-dependency-import-check error
  spm-test-options: --parallel
  swift-version: '6.0'

jobs:
  build-linux:
    name: "Build and test: ${{ matrix.host.os }}/${{ inputs.build-type }}"
    strategy:
      fail-fast: false
      matrix:
        host: [
          { type: linux, os: ubuntu-latest,
            build-options: "-Xswiftc -static-stdlib",
            test-options: "--enable-code-coverage"
          }
        ]
        # configuration: [ "debug", "release" ]

    runs-on: ${{ matrix.host.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Setup swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.swift-version }}

    - run: swift --version

    - name: Build (${{ inputs.build-type }})
      id: build
      run: |
        set -eo pipefail
        swift build -c ${{ inputs.build-type }} ${{ matrix.host.build-options }}
        BUILD_DIR=$(swift build -c ${{ inputs.build-type }} --show-bin-path)
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # - name: Check code coverage
    #   uses: mattpolzin/swift-codecov-action@0.7.3
    #   with:
    #     SORT_ORDER: +cov
    #     MINIMUM_COVERAGE: 84
    #     CODECOV_JSON: .build/${{ inputs.build-type }}/codecov/*.json


    - name: Upload Hylo LSP artifacts (${{ inputs.build-type }})
      uses: actions/upload-artifact@v4
      with:
        name: hylo-lsp-artifacts-linux
        path: |
          artifacts/hylo-lsp-client
          artifacts/hylo-lsp-server

  build-native-macos:
    name: "Build and test: ${{ matrix.host.os }}/${{ inputs.build-type }}"
    strategy:
      fail-fast: false
      matrix:
        host: [
          {
            type: macos, os: macos-15,
            build-options: "--build-tests -Xswiftc -enable-testing",
            # No coverage support on MacOS
            test-options: ""
          }
        ]
        # configuration: [ $BUILD_TYPE ]
        # configuration: [ "debug", "release" ]

    runs-on: ${{ matrix.host.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Setup swift
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.swift-version }}

    - run: swift --version

    - name: Build (${{ inputs.build-type }})
      id: build
      run: |
        set -eo pipefail
        swift build -c ${{ inputs.build-type }} ${{ matrix.host.build-options }}
        BUILD_DIR=$(swift build -c ${{ inputs.build-type }} --show-bin-path)
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # - name: Test (${{ inputs.build-type }})
    #   run: |
    #     set -eo pipefail
    #     export PKG_CONFIG_PATH=$PWD/hylo
    #     swift test -c ${{ inputs.build-type }} ${{ matrix.host.test-options }} |
    #       tee testoutput.txt && (
    #         (grep -q "[.']EndToEndTests[/. ]test_" testoutput.txt && grep -q "[.']HyloTests[/. ]test_" testoutput.txt) ||
    #         (echo "error: generated tests failed to run; see
    #         https://github.com/apple/swift-package-manager/issues/6595" && false) )

    - name: Upload Hylo LSP artifacts (${{ inputs.build-type }})
      uses: actions/upload-artifact@v4
      with:
        name: hylo-lsp-artifacts-mac
        path: |
          ${{ env.BUILD_DIR }}/hylo-lsp-client
          ${{ env.BUILD_DIR }}/hylo-lsp-server

  build-native-windows:
    name: "Build and test: windows-latest/${{ inputs.build-type }}"
    # strategy:
    #   fail-fast: false
    runs-on: windows-latest
    steps:
    - name: Setup swift
      uses: compnerd/gha-setup-swift@main
      with:
        branch: swift-${{ env.swift-version }}-release
        tag: ${{ env.swift-version }}-RELEASE

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    # - name: Swift version and location
    #   run: |
    #     swift --version
    #     where swift
    #     Get-ChildItem -Recurse "C:\Program Files\Swift"

    - name: Build and copy support library
      run: |
        clang -c ./StandardLibrary/Sources/LibC.c -o HyloLibC.lib
        xcopy HyloLibC.lib c:\program" "files\microsoft" "visual" "studio\2022\enterprise\vc\tools\msvc\${{ env.VCToolsVersion }}\lib\x64\
      working-directory: hylo

    - name: Build (${{ inputs.build-type }})
      id: build
      continue-on-error: true
      run: |
        $BUILD_DIR = swift build -c ${{ inputs.build-type }} --show-bin-path
        echo BUILD_DIR=$BUILD_DIR
        echo BUILD_DIR=$BUILD_DIR >> $env:GITHUB_ENV
        swift build -c ${{ inputs.build-type }}

    # Windows build sometimes just fails
    - name: Retry on failure
      continue-on-error: false
      if: steps.build.outcome != 'success'
      run: swift build -c ${{ inputs.build-type }}


    # - name: List build artifacts
    #   run: Get-ChildItem -Recurse $env:BUILD_DIR

    # - name: Copy artifacts
    #   run: |
    #     $BUILD_DIR = swift build -c ${{ inputs.build-type }} --show-bin-path
    #     xcopy $BUILD_DIR artifacts /I

    - name: Upload Swift artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hylo-lsp-artifacts-windows
        path: |
          C:\Program Files\Swift\runtime-development\usr\bin

    - name: Upload Hylo LSP artifacts (${{ inputs.build-type }})
      uses: actions/upload-artifact@v4
      with:
        name: hylo-lsp-artifacts-windows
        path: |
          ${{ env.BUILD_DIR }}/hylo-lsp-client.exe
          ${{ env.BUILD_DIR }}/hylo-lsp-server.exe

    # # - name: Retry on failure
    # #   continue-on-error: false
    # #   if: steps.build.outcome != 'success'
    # #   run: swift build -v -c release

